Things that need to be coded:

(pseudocode lecture 19)

Parser
Units for the pipeline
5 stages
implement the clock
branch predictions/forwarding (3)
current instruction struct (Audrey is doing this right now)
branch detection (Branch detection should be in the ID, Decode, stage of the pipe)

Update 4/5/17
Bugs/confusions:

1) instructions get truncated larger than 0x80000000 FIXED - use strtoul not strtol
2) How to deal with sll/slr. What different ALU functions are there besides add, sub, AND, OR, slti
3) what are the ALUop codes for I-format instructions. what state triggers you to look at the funct field
4) figure out the instruction we need to do (Appendix A - last few pages). currently, we are implementing green sheet instructions
5) what does store word skip writeback stage, how do r-format instructions skip memory stage
6) change init to a global init, and a per instruction init (to initialize program vs. reset stage structs)
7) fix infinite loop of init in fetchstage();

Next on the list:
5) pipelining (do after fixing the rest of the bugs)
9) after I-format instructions, start jump/branch (Vanika)

Trivial but useful stuff electrical engineers may not go over:
- Header files and c files should be vaguely tree-shaped, to prevent linker errors. Each "leaf" c file should only include its own h file, and main can include them all.
